
--СОЗДАЮ ДАННЫЕ

-- создал табл-у items. id20шт автоинкрем, price рандом.

CREATE TABLE hh."items" (
  item_id SERIAL PRIMARY KEY,
 price int NULL
);
SELECT *
FROM hh.items

INSERT INTO items (item_id,price)
VALUES
  (1,'70'),
  (2,'142'),
  (3,'129'),
  (4,'142'),
  (5,'78'),
  (6,'103'),
  (7,'114'),
  (8,'79'),
  (9,'53'),
  (10,'143'),
  (11,'117'),
  (12,'69'),
  (13,'134'),
  (14,'62'),
  (15,'81'),
  (16,'107'),
  (17,'148'),
  (18,'37'),
  (19,'62'),
  (20,'13');

-- создал табл-у users. id100шт автоинкрем, age рандом.
 CREATE TABLE hh.users (
   user_id SERIAL PRIMARY KEY,
  age integer NULL
);
INSERT INTO hh.users (user_id,age)
VALUES
  (1,64),
  (2,29),
  (3,46),
  (4,41),
  (5,31),
  (6,48),
  (7,48),
  (8,22),
  (9,55),
  (10,61),
  (11,68),
  (12,36),
  (13,52),
  (14,54),
  (15,22),
  (16,46),
  (17,42),
  (18,37),
  (19,22),
  (20,63),
  (21,60),
  (22,27),
  (23,28),
  (24,19),
  (25,33),
  (26,58),
  (27,17),
  (28,63),
  (29,26),
  (30,29),
  (31,54),
  (32,67),
  (33,21),
  (34,58),
  (35,47),
  (36,50),
  (37,61),
  (38,66),
  (39,30),
  (40,47),
  (41,65),
  (42,28),
  (43,27),
  (44,24),
  (45,20),
  (46,30),
  (47,19),
  (48,60),
  (49,49),
  (50,57);
INSERT INTO hh.users (user_id,age)
VALUES
  (51,42),
  (52,65),
  (53,57),
  (54,52),
  (55,19),
  (56,49),
  (57,19),
  (58,53),
  (59,29),
  (60,50),
  (61,66),
  (62,66),
  (63,68),
  (64,40),
  (65,18),
  (66,69),
  (67,42),
  (68,68),
  (69,38),
  (70,32),
  (71,48),
  (72,43),
  (73,50),
  (74,33),
  (75,63),
  (76,44),
  (77,24),
  (78,33),
  (79,34),
  (80,46),
  (81,37),
  (82,27),
  (83,69),
  (84,36),
  (85,56),
  (86,46),
  (87,38),
  (88,40),
  (89,68),
  (90,40),
  (91,23),
  (92,58),
  (93,42),
  (94,64),
  (95,42),
  (96,47),
  (97,68),
  (98,40),
  (99,46),
  (100,59);
  SELECT *
FROM hh.users

-- создал табл-у purchases. id300шт автоинкрем, date 1/01/2021-1/01/2023.
CREATE TABLE hh."purchases" (
  purchase_id SERIAL,
 p_date date
);
INSERT INTO hh.purchases  (purchase_id,p_date)	
VALUES
  (1,'17.11.21'),
  (2,'16.01.22'),
  (3,'19.02.22'),
  (4,'21.12.22'),
  (5,'07.12.22'),
  (6,'08.05.21'),
  (7,'23.08.23'),
  (8,'05.12.23'),
  (9,'09.01.22'),
  (10,'05.02.21'),
  (11,'16.11.22'),
  (12,'03.01.23'),
  (13,'31.01.23'),
  (14,'27.06.23'),
  (15,'23.01.22'),
  (16,'03.09.23'),
  (17,'17.12.23'),
  (18,'23.09.23'),
  (19,'13.11.21'),
  (20,'13.10.23'),
  (21,'08.08.22'),
  (22,'11.12.21'),
  (23,'25.07.21'),
  (24,'26.02.22'),
  (25,'03.05.23'),
  (26,'15.02.22'),
  (27,'13.10.23'),
  (28,'25.03.22'),
  (29,'14.07.21'),
  (30,'05.09.23'),
  (31,'27.03.21'),
  (32,'29.04.21'),
  (33,'08.02.21'),
  (34,'07.05.23'),
  (35,'13.04.22'),
  (36,'29.04.22'),
  (37,'15.09.21'),
  (38,'03.12.21'),
  (39,'09.06.22'),
  (40,'12.12.21'),
  (41,'23.05.23'),
  (42,'30.08.22'),
  (43,'04.11.23'),
  (44,'14.01.21'),
  (45,'12.02.23'),
  (46,'03.05.23'),
  (47,'23.01.22'),
  (48,'12.05.21'),
  (49,'23.06.23'),
  (50,'10.09.21');
INSERT INTO hh.purchases  (purchase_id,p_date)
VALUES
  (51,'26.01.23'),
  (52,'24.02.22'),
  (53,'11.02.23'),
  (54,'21.03.22'),
  (55,'31.01.21'),
  (56,'07.08.22'),
  (57,'17.11.23'),
  (58,'04.05.23'),
  (59,'12.07.23'),
  (60,'10.08.22'),
  (61,'25.02.23'),
  (62,'11.05.23'),
  (63,'27.10.23'),
  (64,'20.11.21'),
  (65,'03.07.23'),
  (66,'31.07.23'),
  (67,'22.09.23'),
  (68,'31.05.21'),
  (69,'17.05.22'),
  (70,'27.08.22'),
  (71,'03.06.21'),
  (72,'25.03.21'),
  (73,'29.01.22'),
  (74,'06.03.23'),
  (75,'01.09.21'),
  (76,'30.04.23'),
  (77,'08.12.22'),
  (78,'12.07.23'),
  (79,'11.05.21'),
  (80,'02.12.23'),
  (81,'16.01.23'),
  (82,'01.05.23'),
  (83,'23.12.22'),
  (84,'27.07.22'),
  (85,'07.05.21'),
  (86,'28.07.23'),
  (87,'05.04.21'),
  (88,'08.12.21'),
  (89,'13.08.21'),
  (90,'19.07.21'),
  (91,'19.02.23'),
  (92,'24.08.23'),
  (93,'18.09.22'),
  (94,'08.10.21'),
  (95,'03.04.22'),
  (96,'17.11.22'),
  (97,'14.04.21'),
  (98,'04.03.23'),
  (99,'05.11.21'),
  (100,'26.12.23');
INSERT INTO hh.purchases  (purchase_id,p_date)
VALUES
  (101,'04.03.23'),
  (102,'02.10.22'),
  (103,'13.11.21'),
  (104,'16.07.22'),
  (105,'10.07.23'),
  (106,'04.06.22'),
  (107,'26.10.22'),
  (108,'24.06.21'),
  (109,'01.01.23'),
  (110,'02.09.21'),
  (111,'24.08.22'),
  (112,'17.02.23'),
  (113,'27.04.23'),
  (114,'03.03.22'),
  (115,'23.02.21'),
  (116,'19.12.21'),
  (117,'24.10.23'),
  (118,'20.11.23'),
  (119,'21.02.23'),
  (120,'06.01.23'),
  (121,'25.09.21'),
  (122,'31.10.21'),
  (123,'07.02.23'),
  (124,'25.10.22'),
  (125,'09.05.22'),
  (126,'11.01.22'),
  (127,'17.07.22'),
  (128,'10.08.23'),
  (129,'25.06.22'),
  (130,'25.03.23'),
  (131,'01.07.23'),
  (132,'06.02.21'),
  (133,'19.08.22'),
  (134,'31.08.23'),
  (135,'30.09.21'),
  (136,'15.12.21'),
  (137,'13.01.23'),
  (138,'22.06.22'),
  (139,'11.06.21'),
  (140,'24.06.21'),
  (141,'17.06.22'),
  (142,'22.02.21'),
  (143,'29.11.23'),
  (144,'21.08.22'),
  (145,'23.04.22'),
  (146,'10.09.22'),
  (147,'10.05.23'),
  (148,'05.12.22'),
  (149,'07.06.22'),
  (150,'14.02.21');
INSERT INTO hh.purchases  (purchase_id,p_date)
VALUES
  (151,'26.05.22'),
  (152,'08.08.23'),
  (153,'08.05.22'),
  (154,'28.10.21'),
  (155,'21.01.22'),
  (156,'25.06.22'),
  (157,'20.08.21'),
  (158,'08.01.21'),
  (159,'10.03.23'),
  (160,'12.02.22'),
  (161,'17.10.21'),
  (162,'09.07.23'),
  (163,'16.07.23'),
  (164,'30.05.23'),
  (165,'14.08.21'),
  (166,'18.08.23'),
  (167,'03.09.22'),
  (168,'13.09.21'),
  (169,'29.10.21'),
  (170,'03.06.21'),
  (171,'09.04.21'),
  (172,'16.05.23'),
  (173,'11.08.21'),
  (174,'03.10.21'),
  (175,'28.12.22'),
  (176,'20.10.23'),
  (177,'28.01.23'),
  (178,'04.06.21'),
  (179,'16.10.22'),
  (180,'01.03.22'),
  (181,'21.04.23'),
  (182,'21.08.23'),
  (183,'11.11.22'),
  (184,'14.02.22'),
  (185,'25.06.23'),
  (186,'10.11.22'),
  (187,'08.06.22'),
  (188,'14.04.21'),
  (189,'18.09.22'),
  (190,'05.04.23'),
  (191,'27.07.21'),
  (192,'07.06.22'),
  (193,'25.12.23'),
  (194,'29.07.21'),
  (195,'18.08.21'),
  (196,'08.10.21'),
  (197,'02.08.21'),
  (198,'06.04.22'),
  (199,'08.02.22'),
  (200,'01.03.21');
INSERT INTO hh.purchases  (purchase_id,p_date)
VALUES
  (201,'25.04.22'),
  (202,'30.08.23'),
  (203,'16.09.23'),
  (204,'02.03.21'),
  (205,'15.12.23'),
  (206,'20.11.22'),
  (207,'06.09.23'),
  (208,'19.08.21'),
  (209,'23.01.21'),
  (210,'13.06.21'),
  (211,'15.11.23'),
  (212,'01.09.22'),
  (213,'29.12.22'),
  (214,'07.04.21'),
  (215,'14.09.21'),
  (216,'05.03.23'),
  (217,'26.01.22'),
  (218,'28.06.22'),
  (219,'25.02.22'),
  (220,'01.12.23'),
  (221,'02.05.22'),
  (222,'07.06.22'),
  (223,'21.05.21'),
  (224,'08.01.21'),
  (225,'11.01.22'),
  (226,'28.07.22'),
  (227,'08.01.21'),
  (228,'21.10.22'),
  (229,'20.01.22'),
  (230,'23.05.23'),
  (231,'06.11.22'),
  (232,'01.05.23'),
  (233,'02.12.22'),
  (234,'29.05.23'),
  (235,'03.09.21'),
  (236,'25.12.22'),
  (237,'28.02.22'),
  (238,'14.11.21'),
  (239,'26.12.21'),
  (240,'07.04.21'),
  (241,'29.08.22'),
  (242,'28.07.22'),
  (243,'28.03.22'),
  (244,'21.07.23'),
  (245,'02.08.23'),
  (246,'03.06.21'),
  (247,'18.07.21'),
  (248,'09.09.21'),
  (249,'19.12.21'),
  (250,'07.12.21');
INSERT INTO hh.purchases  (purchase_id,p_date)
VALUES
  (251,'12.07.23'),
  (252,'31.01.23'),
  (253,'19.01.22'),
  (254,'26.06.22'),
  (255,'17.10.23'),
  (256,'18.04.22'),
  (257,'21.05.22'),
  (258,'07.07.23'),
  (259,'28.02.23'),
  (260,'07.08.21'),
  (261,'21.07.22'),
  (262,'08.11.22'),
  (263,'12.11.23'),
  (264,'06.07.22'),
  (265,'07.10.21'),
  (266,'10.09.22'),
  (267,'17.12.21'),
  (268,'09.08.21'),
  (269,'02.10.23'),
  (270,'24.03.21'),
  (271,'02.08.22'),
  (272,'30.08.23'),
  (273,'13.08.21'),
  (274,'17.04.21'),
  (275,'22.08.23'),
  (276,'02.03.21'),
  (277,'28.08.23'),
  (278,'29.12.23'),
  (279,'12.06.23'),
  (280,'08.02.21'),
  (281,'22.03.23'),
  (282,'01.10.21'),
  (283,'28.05.21'),
  (284,'23.05.21'),
  (285,'16.07.21'),
  (286,'03.11.22'),
  (287,'10.08.22'),
  (288,'07.06.22'),
  (289,'16.06.22'),
  (290,'20.07.21'),
  (291,'09.07.22'),
  (292,'18.11.22'),
  (293,'11.03.21'),
  (294,'04.06.23'),
  (295,'13.07.23'),
  (296,'06.09.21'),
  (297,'11.02.21'),
  (298,'07.08.23'),
  (299,'18.06.22'),
  (300,'26.09.21');

-- добавляю колонку user_id в таблицу purchases
ALTER TABLE hh.purchases 
ADD user_id int
-- добавляю внешний ключ user_id
ALTER TABLE hh.purchases
ADD CONSTRAINT cons_f FOREIGN KEY (user_id) REFERENCES users(user_id) 
-- заполняю user_id ранд-ми знач-ми не равными нолю
UPDATE  hh.purchases SET user_id= trunc(random()*100+1)

-- добавляю колонку item_id в таблицу purchases
ALTER TABLE hh.purchases 
ADD item_id int  
-- добавляю внешний ключ item_id
ALTER TABLE hh.purchases
ADD CONSTRAINT cons_ff FOREIGN KEY (item_id) REFERENCES items(item_id) 
-- заполняю item_id ранд-ми знач-ми не равными нолю
UPDATE  hh.purchases SET item_id= trunc(random()/5*100+1)
SELECT *
FROM hh.purchases

/*ЗАДАЧИ

А) какую сумму в среднем в месяц тратит:
 пользователи в возрастном диапазоне от 18 до 25 лет включительно
 пользователи в возрастном диапазоне от 26 до 35 лет включительно*/

WITH tabl AS
	(SELECT
		p.user_id
		, age
		, SUM(i.price) expences
		, date_trunc('month', p_date)::date as month
	FROM users AS u  JOIN purchases AS p 
	ON u.user_id=p.user_id 
	JOIN items AS i 
	ON p.item_id=i.item_id
	GROUP BY 1,2,4),
 
-- Таблица содержит среднюю ежемесечных трат сегмента 18-25 лет
	x as 
		(SELECT DISTINCT
 			ROUND(avg(expences) OVER (),2) AS avg18_25
		FROM tabl
		WHERE age>=18 AND age<=25),

-- Таблица содержит среднюю ежемесечных трат сегмента 26-36 лет
	y as 
 		(SELECT DISTINCT
 		 	ROUND(avg(expences) OVER (),2) AS avg26_36
		FROM tabl
		WHERE age>=26 AND age<=36)
	
-- ОТВЕТ
		SELECT 
			'Пользователь из сегмента 18-25л в ср. тратит: '  || x.avg18_25,
			'Пользователь из сегмента 26-36л в ср. тратит: '  || y.avg26_36
		FROM x,y
		

		
--Б) в каком месяце года выручка от пользователей в возрастном диапазоне 35+ самая большая
-- Взял к рассмотрению 2023г	
		
SELECT DISTINCT
	SUM(expences) OVER (PARTITION BY tabl.MONTH) month_revenue
	, EXTRACT(MONTH FROM tabl.MONTH) month_nmb
FROM(SELECT
		p.user_id
		, age
		, SUM(i.price) expences
		, date_trunc('month', p_date)::date as month
		
	FROM users AS u  JOIN purchases AS p 
	ON u.user_id=p.user_id 
	JOIN items AS i 
	ON p.item_id=i.item_id
	WHERE age>=35
	GROUP BY 1,2,4
	having  date_trunc('month', p_date)::date>='2023-01-01')  tabl
	ORDER BY 1 DESC
	LIMIT 1
	
	
--В) какой товар обеспечивает дает наибольший вклад в выручку за последний год
SELECT p.item_id, sum(price) revenue, EXTRACT (YEAR FROM p_date) AS year
FROM items AS i  JOIN purchases AS p 
ON i.item_id=p.item_id
GROUP BY 1,3
ORDER BY 3 desc, 2 DESC
LIMIT 1


--Г) топ-3 товаров по выручке и их доля в общей выручке за любой год
--Взял 2022г к анализу

SELECT 
	item_id
	,item_revenue
	,ROUND((item_revenue/year_revenue*100),2) as share_in_revenue_perc
FROM(
	SELECT 
		p.item_id
		, SUM(price) item_revenue
		, SUM(SUM(price)) OVER () AS year_revenue
		,ROW_NUMBER () OVER (ORDER BY SUM(price) desc) rwnb
	FROM items AS i  JOIN purchases AS p 
	ON i.item_id=p.item_id
	WHERE p_date between '2022-01-01' AND '2022-12-31'
	GROUP BY 1, i.price)tabl
WHERE rwnb<=3






	
	
	

		
		
		
		
		
		
	


	
	



